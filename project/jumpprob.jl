using JuMP
using HiGHS

weights_list = [[0, 2, 0, -2, 0, 2, 0, -2, 0, 2, 0, -2, -2, 0, 2, 0, 0, -2, 0, 2, 0],
[2, 0, 2, -2, 0, 2, 0, 0, -2, 2, -2, 0, 0, -2, 2, 0, -2, 0, -2, 2, 0],
[2, 2, 2, -2, 0, 0, 0, 0, -2, 0, 0, -2, 0, -2, 2, 0, -2, -2, -2, 2, 0],
[2, 2, 2, 0, 0, 0, 0, -2, -2, 0, -2, -2, -2, -2, 0, -2, 0, 0, 0, 2, 2],
[2, 0, 2, 0, 0, 2, 0, -2, -2, 2, 0, 0, -2, -2, 0, -2, 0, -2, 0, 2, 2],
[0, 2, 2, 0, 0, 2, 2, 0, 0, 0, -2, -2, -2, -2, 0, -2, -2, 0, 0, 2, 2],
[0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, -2, -2, 0, -2, -2, -2, 0, 2, 2],
[0, 0, 0, -2, -2, 0, 0, -2, -2, 0, -2, -2, -2, -2, 0, 0, 0, 0, 0, 2, 2],
[2, 0, 0, -2, -2, 2, 2, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, 0, 0, 2, 2],
[0, 2, 0, -2, -2, 2, 0, -2, -2, 2, 0, 0, -2, -2, 0, 0, 0, -2, 0, 2, 2],
[2, 2, 0, -2, -2, 0, 2, 0, 0, 2, 0, 0, -2, -2, 0, 0, -2, -2, 0, 2, 2],
[0, 0, 2, -2, -2, 0, 2, -2, -2, 2, -2, -2, 0, 0, 0, 0, 0, 0, -2, 2, 2],
[2, 2, 0, 0, 0, 0, 2, -2, -2, 2, -2, -2, 0, 0, 0, -2, 0, 0, -2, 2, 2],
[2, 0, 2, -2, -2, 2, 0, 0, 0, 2, -2, -2, 0, 0, 0, 0, -2, 0, -2, 2, 2],
[0, 2, 0, 0, 0, 2, 0, 0, 0, 2, -2, -2, 0, 0, 0, -2, -2, 0, -2, 2, 2],
[0, 2, 2, -2, -2, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, 2, 2],
[2, 0, 0, 0, 0, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, -2, 0, -2, -2, 2, 2],
[2, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, 2, 2],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 2, 2],
[0, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, -2, 0, -2, 2, 0, 0, 0, 0, 0, 2],
[2, 2, 2, -2, 0, 0, 0, 0, -2, 0, 0, -2, 0, -2, 2, -2, 0, 0, 0, 0, 2],
[2, 0, 0, 0, -2, 2, 2, -2, 0, 0, 0, -2, 0, -2, 2, 0, -2, 0, 0, 0, 2],
[0, 2, 2, -2, 0, 2, 2, -2, 0, 0, 0, -2, 0, -2, 2, -2, -2, 0, 0, 0, 2],
[0, 2, 0, 0, -2, 2, 0, 0, -2, 2, -2, 0, 0, -2, 2, 0, 0, -2, 0, 0, 2],
[2, 0, 2, -2, 0, 2, 0, 0, -2, 2, -2, 0, 0, -2, 2, -2, 0, -2, 0, 0, 2],
[2, 2, 0, 0, -2, 0, 2, -2, 0, 2, -2, 0, 0, -2, 2, 0, -2, -2, 0, 0, 2],
[0, 0, 2, -2, 0, 0, 2, -2, 0, 2, -2, 0, 0, -2, 2, -2, -2, -2, 0, 0, 2],
[0, 0, 2, 0, -2, 0, 2, 0, -2, 2, 0, -2, -2, 0, 2, 0, 0, 0, -2, 0, 2],
[2, 2, 0, -2, 0, 0, 2, 0, -2, 2, 0, -2, -2, 0, 2, -2, 0, 0, -2, 0, 2],
[2, 0, 2, 0, -2, 2, 0, -2, 0, 2, 0, -2, -2, 0, 2, 0, -2, 0, -2, 0, 2],
[0, 2, 0, -2, 0, 2, 0, -2, 0, 2, 0, -2, -2, 0, 2, -2, -2, 0, -2, 0, 2],
[0, 2, 2, 0, -2, 2, 2, 0, -2, 0, -2, 0, -2, 0, 2, 0, 0, -2, -2, 0, 2],
[2, 0, 0, -2, 0, 2, 2, 0, -2, 0, -2, 0, -2, 0, 2, -2, 0, -2, -2, 0, 2],
[2, 2, 2, 0, -2, 0, 0, -2, 0, 0, -2, 0, -2, 0, 2, 0, -2, -2, -2, 0, 2],
[0, 0, 0, -2, 0, 0, 0, -2, 0, 0, -2, 0, -2, 0, 2, -2, -2, -2, -2, 0, 2],
[0, 0, 0, -2, 0, 0, 0, -2, 0, 0, -2, 0, -2, 0, 2, 0, 0, 0, 0, 2, 0],
[2, 2, 2, 0, -2, 0, 0, -2, 0, 0, -2, 0, -2, 0, 2, -2, 0, 0, 0, 2, 0],
[2, 0, 0, -2, 0, 2, 2, 0, -2, 0, -2, 0, -2, 0, 2, 0, -2, 0, 0, 2, 0],
[0, 2, 2, 0, -2, 2, 2, 0, -2, 0, -2, 0, -2, 0, 2, -2, -2, 0, 0, 2, 0],
[2, 0, 2, 0, -2, 2, 0, -2, 0, 2, 0, -2, -2, 0, 2, -2, 0, -2, 0, 2, 0],
[2, 2, 0, -2, 0, 0, 2, 0, -2, 2, 0, -2, -2, 0, 2, 0, -2, -2, 0, 2, 0],
[0, 0, 2, 0, -2, 0, 2, 0, -2, 2, 0, -2, -2, 0, 2, -2, -2, -2, 0, 2, 0],
[0, 0, 2, -2, 0, 0, 2, -2, 0, 2, -2, 0, 0, -2, 2, 0, 0, 0, -2, 2, 0],
[2, 2, 0, 0, -2, 0, 2, -2, 0, 2, -2, 0, 0, -2, 2, -2, 0, 0, -2, 2, 0],
[0, 2, 0, 0, -2, 2, 0, 0, -2, 2, -2, 0, 0, -2, 2, -2, -2, 0, -2, 2, 0],
[0, 2, 2, -2, 0, 2, 2, -2, 0, 0, 0, -2, 0, -2, 2, 0, 0, -2, -2, 2, 0],
[2, 0, 0, 0, -2, 2, 2, -2, 0, 0, 0, -2, 0, -2, 2, -2, 0, -2, -2, 2, 0],
[0, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, -2, 0, -2, 2, -2, -2, -2, -2, 2, 0],
[2, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0],
[2, 0, 0, 0, 0, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0],
[0, 2, 2, -2, -2, 2, 2, -2, -2, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, 0, 0],
[0, 2, 0, 0, 0, 2, 0, 0, 0, 2, -2, -2, 0, 0, 0, 0, 0, -2, 0, 0, 0],
[2, 0, 2, -2, -2, 2, 0, 0, 0, 2, -2, -2, 0, 0, 0, -2, 0, -2, 0, 0, 0],
[2, 2, 0, 0, 0, 0, 2, -2, -2, 2, -2, -2, 0, 0, 0, 0, -2, -2, 0, 0, 0],
[0, 0, 2, -2, -2, 0, 2, -2, -2, 2, -2, -2, 0, 0, 0, -2, -2, -2, 0, 0, 0],
[0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, -2, -2, 0, 0, 0, 0, -2, 0, 0],
[2, 2, 0, -2, -2, 0, 2, 0, 0, 2, 0, 0, -2, -2, 0, -2, 0, 0, -2, 0, 0],
[2, 0, 2, 0, 0, 2, 0, -2, -2, 2, 0, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0],
[0, 2, 0, -2, -2, 2, 0, -2, -2, 2, 0, 0, -2, -2, 0, -2, -2, 0, -2, 0, 0],
[0, 2, 2, 0, 0, 2, 2, 0, 0, 0, -2, -2, -2, -2, 0, 0, 0, -2, -2, 0, 0],
[2, 0, 0, -2, -2, 2, 2, 0, 0, 0, -2, -2, -2, -2, 0, -2, 0, -2, -2, 0, 0],
[2, 2, 2, 0, 0, 0, 0, -2, -2, 0, -2, -2, -2, -2, 0, 0, -2, -2, -2, 0, 0],
[0, 0, 0, -2, -2, 0, 0, -2, -2, 0, -2, -2, -2, -2, 0, -2, -2, -2, -2, 0, 0]
]

model = Model(HiGHS.Optimizer)
@variable(model, x[1:21])

for i in 1:7
    @constraint(model, sum(weights_list[i][j] * x[j] for j in 1:21) == 0)
end
for i in 8:length(weights_list)
    @constraint(model, sum(weights_list[i][j] * x[j] for j in 1:21) <= -1)
end

@objective(model, Min, x[1])

optimize!(model)
is_solved_and_feasible(model)